///////////////////////////////////////////////////////////////////////////////
// Aperiodic Task Class Definition
//
// An aperiodic task is defined by subclassing the
// PeriodicTask taking care to call the base class constructor and defining
// the Task() function which should not return under normal circumstances
// The task is started with a call to Init() function.  The task can be
// gated by means of a trigger signal generated by a call to a Trigger()
// member function.  The Task() function can block waiting for a trigger
// by calling the TriggerWait() function.  The value argument passed
// to the Trigger() function is returned by the TriggerWait() function.
//
///////////////////////////////////////////////////////////////////////////////


#ifndef AperiodicTask_h
#define AperiodicTask_h

#include <pthread.h>


class AperiodicTask{
    public:
        // Constuctor
        AperiodicTask();
        // Destructor
        ~AperiodicTask();

		void Init(char *name, int priority);
		int Trigger(int value);


    private:
		int mChannelId;
		int mConnectId;
		int mPriority;
		char *mTaskName;
		pthread_t mThreadId;
		static void *TaskThread(void *arg);

		virtual void Task()=0; 

	 protected:
		int TriggerWait();
};

#endif // AperiodicTask_h


